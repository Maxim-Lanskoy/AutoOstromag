import asyncio
from pyrogram import Client
from pyrogram.errors import FloodWait, RPCError
from pyrogram.types import InlineKeyboardMarkup # –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∏–ø—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
import re # –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤
import traceback # –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç –¥–ª—è –≤–∏–≤–æ–¥—É –ø–æ–≤–Ω–æ–≥–æ —Å—Ç–µ–∫—É –≤–∏–∫–ª–∏–∫—ñ–≤
import sys # –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç sys –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É–≤–∞–Ω–Ω—è –≤–∏–≤–æ–¥—É

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É–≤–∞–Ω–Ω—è –≤–∏–≤–æ–¥—É –∫–æ–Ω—Å–æ–ª—ñ –Ω–∞ UTF-8 –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –µ–º–æ–¥–∑—ñ
# –¶–µ –≤–∏—Ä—ñ—à—É—î UnicodeEncodeError –Ω–∞ –¥–µ—è–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö Windows
if sys.platform == "win32":
    sys.stdout.reconfigure(encoding='utf-8')

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ API —Ç–∞ —á–∞—Ç—É –±–æ—Ç–∞
api_id = 22491271
api_hash = "c731b2060f7471a7b858d38cbaf93f67"
session_name = "ostro_session"
bot_chat = "ostromag_game_bot"

DELAY = 3  # –°–µ–∫—É–Ω–¥ –º—ñ–∂ –¥—ñ—è–º–∏ (–∑–∞–≥–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –∑–±—ñ–ª—å—à–µ–Ω–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Pyrogram
app = Client(session_name, api_id=api_id, api_hash=api_hash)

async def click_button(chat_id, keyword, message_to_click_on=None, wait_after=3, retries=5, retry_delay=1, exclude_keyword=None):
    """
    –ù–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É, —â–æ –º—ñ—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–µ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ, —É —á–∞—Ç—ñ.
    –ú–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∞–±–æ —à—É–∫–∞—Ç–∏ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó.
    –ó–±—ñ–ª—å—à–µ–Ω–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –∫—Ä–∞—â–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
    –î–æ–¥–∞–Ω–æ –º–µ—Ö–∞–Ω—ñ–∑–º –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–± –¥–ª—è –ø–æ—à—É–∫—É –∫–Ω–æ–ø–∫–∏.
    –î–æ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä exclude_keyword –¥–ª—è –≤–∏–∫–ª—é—á–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫.
    """
    await asyncio.sleep(wait_after)
    print(f"üîç –®—É–∫–∞—é –∫–Ω–æ–ø–∫—É '{keyword}' (—Å–ø—Ä–æ–±–∞ 1/{retries})...")

    for attempt in range(1, retries + 1):
        target_message = None
        if message_to_click_on:
            try:
                # –ó–∞–≤–∂–¥–∏ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–π–Ω–æ–≤—ñ—à—É –≤–µ—Ä—Å—ñ—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ –Ω–∞–¥–∞–Ω–æ
                target_message = await app.get_messages(chat_id, message_to_click_on.id)
                print(f"üîÑ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (ID: {message_to_click_on.id}) –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Å–ø—Ä–æ–±–∏ {attempt}.")
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (ID: {message_to_click_on.id}): {e}. –°–ø—Ä–æ–±–∞ {attempt}/{retries}. –°–ø—Ä–æ–±—É—é –ø–æ—à—É–∫–∞—Ç–∏ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó.")
                traceback.print_exc()
                target_message = None # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–æ—à—É–∫—É –≤ —ñ—Å—Ç–æ—Ä—ñ—ó
        
        if not target_message: # –Ø–∫—â–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –Ω–∞–¥–∞–Ω–æ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è, —à—É–∫–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó
            messages_to_check_in_history = []
            async for msg_hist in app.get_chat_history(chat_id, limit=20): # –ó–±—ñ–ª—å—à–µ–Ω–æ –ª—ñ–º—ñ—Ç –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —à–∞–Ω—Å—É
                messages_to_check_in_history.append(msg_hist)
            
            for msg_hist in messages_to_check_in_history:
                if msg_hist.reply_markup and isinstance(msg_hist.reply_markup, InlineKeyboardMarkup):
                    for row in msg_hist.reply_markup.inline_keyboard:
                        for button in row:
                            button_text_stripped = button.text.lower().strip()
                            if keyword.lower().strip() in button_text_stripped:
                                if exclude_keyword and exclude_keyword.lower().strip() in button_text_stripped:
                                    continue
                                # –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É –≤ —ñ—Å—Ç–æ—Ä—ñ—ó, –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏
                                try:
                                    await msg_hist.click(button.text)
                                    print(f"‚úÖ –ö–Ω–æ–ø–∫—É '{button.text}' —É—Å–ø—ñ—à–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó.")
                                    return True
                                except FloodWait as e:
                                    print(f"‚ö†Ô∏è FloodWait: –ó–∞—á–µ–∫–∞–π—Ç–µ {e.value} —Å–µ–∫—É–Ω–¥.")
                                    await asyncio.sleep(e.value + 5)
                                    return False
                                except (TimeoutError, RPCError) as e:
                                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ '{button.text}' –∑ —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")
                                    # –ü—Ä–∏–≥–Ω—ñ—á—É—î–º–æ —Ç—Ä–∞—Å—É–≤–∞–Ω–Ω—è TimeoutError, —è–∫—â–æ —Ü–µ –∫–Ω–æ–ø–∫–∞ "–¢–∞–∫"
                                    if isinstance(e, TimeoutError) and keyword.lower().strip() == "—Ç–∞–∫":
                                        print(f"‚ÑπÔ∏è TimeoutError –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–¢–∞–∫' –∑ —ñ—Å—Ç–æ—Ä—ñ—ó. –û—á—ñ–∫—É—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑–±–∏—Ä–∞–Ω–Ω—è.")
                                    else:
                                        traceback.print_exc() # –í–∏–≤–æ–¥–∏–º–æ —Ç—Ä–∞—Å—É–≤–∞–Ω–Ω—è –¥–ª—è —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫
                                    continue # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –∫–Ω–æ–ø–∫–∏/–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—ó
                                except Exception as e:
                                    print(f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ '{button.text}' –∑ —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")
                                    traceback.print_exc()
                                    return False
            print(f"‚õî –ö–Ω–æ–ø–∫—É '{keyword}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É. –°–ø—Ä–æ–±–∞ {attempt}/{retries}.")
            if attempt < retries:
                await asyncio.sleep(retry_delay)
            continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å–ø—Ä–æ–±–∏

        # –Ø–∫—â–æ —É –Ω–∞—Å —î –¥—ñ–π—Å–Ω–µ target_message (–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–µ)
        print(f"üí¨ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ InlineKeyboardMarkup (ID: {target_message.id}, –¢–µ–∫—Å—Ç: '{target_message.text}')")
        for row in target_message.reply_markup.inline_keyboard:
            for button in row:
                button_text_stripped = button.text.lower().strip()
                print(f"üß© –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É: '{button.text}' (–æ—á–∏—â–µ–Ω–∏–π: '{button_text_stripped}')")
                
                if keyword.lower().strip() in button_text_stripped:
                    if exclude_keyword and exclude_keyword.lower().strip() in button_text_stripped:
                        print(f"üö´ –ü—Ä–æ–ø—É—Å–∫–∞—é –∫–Ω–æ–ø–∫—É '{button.text}', –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ –º—ñ—Å—Ç–∏—Ç—å –≤–∏–∫–ª—é—á–µ–Ω–µ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ '{exclude_keyword}'.")
                        continue
                        
                    print(f"‚û°Ô∏è –ù–∞—Ç–∏—Å–∫–∞—é: '{button.text}'")
                    try:
                        await target_message.click(button.text)
                        print(f"‚úÖ –ö–Ω–æ–ø–∫—É '{button.text}' —É—Å–ø—ñ—à–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ.")
                        return True
                    except FloodWait as e:
                        print(f"‚ö†Ô∏è FloodWait: –ó–∞—á–µ–∫–∞–π—Ç–µ {e.value} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –¥—ñ—î—é.")
                        await asyncio.sleep(e.value + 5)
                        return False
                    except (TimeoutError, RPCError) as e:
                        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ '{button.text}': {e}. –°–ø—Ä–æ–±–∞ {attempt}/{retries}.")
                        # –ü—Ä–∏–≥–Ω—ñ—á—É—î–º–æ —Ç—Ä–∞—Å—É–≤–∞–Ω–Ω—è TimeoutError, —è–∫—â–æ —Ü–µ –∫–Ω–æ–ø–∫–∞ "–¢–∞–∫"
                        if isinstance(e, TimeoutError) and keyword.lower().strip() == "—Ç–∞–∫":
                            print(f"‚ÑπÔ∏è TimeoutError –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–¢–∞–∫' –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–ø—Ä–æ–±—ñ. –û—á—ñ–∫—É—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑–±–∏—Ä–∞–Ω–Ω—è.")
                        else:
                            traceback.print_exc() # –í–∏–≤–æ–¥–∏–º–æ —Ç—Ä–∞—Å—É–≤–∞–Ω–Ω—è –¥–ª—è —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫
                        
                        if attempt < retries:
                            await asyncio.sleep(retry_delay * 2) # –ß–µ–∫–∞—î–º–æ –¥–æ–≤—à–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                            break # –í–∏—Ö–æ–¥–∏–º–æ –∑ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ —Ü–∏–∫–ª—É, —â–æ–± –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ü—ñ–Ω–∏—Ç–∏ target_message (—â–æ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –ø–æ—à—É–∫—É –≤ —ñ—Å—Ç–æ—Ä—ñ—ó)
                        else:
                            print(f"‚ùå –ö–Ω–æ–ø–∫—É '{button.text}' –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –ø—ñ—Å–ª—è {retries} —Å–ø—Ä–æ–±.")
                            return False
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ '{button.text}': {e}")
                        traceback.print_exc()
                        return False
        print(f"‚õî –ö–Ω–æ–ø–∫—É '{keyword}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ü—å–æ–º—É InlineKeyboardMarkup –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ (ID: {target_message.id}).")
        
        if attempt < retries:
            print(f"‚è≥ –ö–Ω–æ–ø–∫—É '{keyword}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–ø—Ä–æ–±—ñ {attempt}/{retries}. –ß–µ–∫–∞—é {retry_delay} —Å–µ–∫. –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é.")
            await asyncio.sleep(retry_delay)
        
    print(f"‚õî –ö–Ω–æ–ø–∫—É '{keyword}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è {retries} —Å–ø—Ä–æ–±.")
    return False

async def get_current_buttons_message(chat_id, wait_after=3):
    """
    –û—Ç—Ä–∏–º—É—î –Ω–∞–π–Ω–æ–≤—ñ—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –º—ñ—Å—Ç–∏—Ç—å InlineKeyboardMarkup.
    """
    await asyncio.sleep(wait_after)
    print("üîç –®—É–∫–∞—é –Ω–∞–π–Ω–æ–≤—ñ—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏...")
    async for msg in app.get_chat_history(chat_id, limit=5): # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if msg.reply_markup and isinstance(msg.reply_markup, InlineKeyboardMarkup):
            print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–∞–π–Ω–æ–≤—ñ—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ (ID: {msg.id}, –¢–µ–∫—Å—Ç: '{msg.text}')")
            return msg
    print("‚õî –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ InlineKeyboardMarkup –≤ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 5 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.")
    return None

async def wait_for_new_buttons_message(chat_id, last_known_message_id, timeout=25, check_interval=1):
    """
    –ß–µ–∫–∞—î –Ω–∞ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ InlineKeyboardMarkup, —â–æ –º–∞—î ID –±—ñ–ª—å—à–µ, –Ω—ñ–∂ last_known_message_id.
    """
    print(f"‚è≥ –ß–µ–∫–∞—é –Ω–∞ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ (–ø—ñ—Å–ª—è ID: {last_known_message_id}). –ú–∞–∫—Å. –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: {timeout} —Å–µ–∫.")
    start_time = asyncio.get_event_loop().time()
    
    while asyncio.get_event_loop().time() - start_time < timeout:
        current_messages = []
        # –ó–±—ñ–ª—å—à–µ–Ω–æ –ª—ñ–º—ñ—Ç –¥–ª—è get_chat_history, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –±—ñ–ª—å—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        async for msg in app.get_chat_history(chat_id, limit=10): 
            current_messages.append(msg)

        found_new_message_candidate = False # –ü—Ä–∞–ø–æ—Ä–µ—Ü—å, —â–æ –≤–∫–∞–∑—É—î, —á–∏ –∑–Ω–∞–π—à–ª–∏ –º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–æ–≤–∏–º
        for msg in current_messages:
            if msg.id > last_known_message_id:
                found_new_message_candidate = True # –ó–Ω–∞–π—à–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–æ–≤—ñ—à–µ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—î
                if msg.reply_markup and isinstance(msg.reply_markup, InlineKeyboardMarkup):
                    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ (ID: {msg.id}, –¢–µ–∫—Å—Ç: '{msg.text}')")
                    return msg
                elif msg.text and "–±—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –ø–æ—Å–ø—ñ—à–∞–π—Ç–µ" in msg.text.lower():
                    print(f"‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è '–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –ø–æ—Å–ø—ñ—à–∞–π—Ç–µ'. –ß–µ–∫–∞—é –¥–æ–¥–∞—Ç–∫–æ–≤–æ {DELAY * 3} —Å–µ–∫—É–Ω–¥.")
                    await asyncio.sleep(DELAY * 3)
                    # –û–Ω–æ–≤–ª—é—î–º–æ last_known_message_id –Ω–∞ ID —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø–æ—à—É–∫ –±—É–≤ –ø—ñ—Å–ª—è –Ω—å–æ–≥–æ
                    last_known_message_id = msg.id 
                    # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ü–∏–∫–ª while, —â–æ–± –∑–Ω–æ–≤—É –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–∞—É–∑–∏
                    break 
            else:
                # –õ–æ–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—ñ –Ω–µ —î –Ω–æ–≤—ñ—à–∏–º–∏, —â–æ–± –±–∞—á–∏—Ç–∏, —â–æ –±–æ—Ç –±–∞—á–∏—Ç—å
                print(f"‚ÑπÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (ID: {msg.id}, –¢–µ–∫—Å—Ç: '{msg.text}') –Ω–µ —î –Ω–æ–≤—ñ—à–∏–º –∑–∞ {last_known_message_id}.")
        
        if not found_new_message_candidate: # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–æ–≤—ñ—à–æ–≥–æ –∑–∞ last_known_message_id
             print(f"‚è≥ –ù–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ß–µ–∫–∞—é {check_interval} —Å–µ–∫. (–∑–∞–ª–∏—à–∏–ª–æ—Å—å {round(timeout - (asyncio.get_event_loop().time() - start_time))} —Å–µ–∫.)")
        
        await asyncio.sleep(check_interval)
    
    print(f"‚ùå –ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—ñ—Å–ª—è {timeout} —Å–µ–∫—É–Ω–¥.")
    return None

async def wait_for_specific_text_message(chat_id, keyword, last_known_message_id, timeout=10, check_interval=0.5):
    """
    –ß–µ–∫–∞—î –Ω–∞ –Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –º—ñ—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–µ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ.
    """
    print(f"‚è≥ –ß–µ–∫–∞—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º '{keyword}' (–ø—ñ—Å–ª—è ID: {last_known_message_id}). –ú–∞–∫—Å. –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: {timeout} —Å–µ–∫.")
    start_time = asyncio.get_event_loop().time()
    while asyncio.get_event_loop().time() - start_time < timeout:
        async for msg in app.get_chat_history(chat_id, limit=5):
            if msg.id > last_known_message_id and msg.text and keyword.lower() in msg.text.lower():
                print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º: '{msg.text}' (ID: {msg.id})")
                return msg
        await asyncio.sleep(check_interval)
    print(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º '{keyword}' –ø—ñ—Å–ª—è {timeout} —Å–µ–∫—É–Ω–¥.")
    return None


async def find_and_recycle_boots():
    """
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—é —Å—Ç–æ—Ä—ñ–Ω–∫—É —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é, –ø–æ—Ç—ñ–º —à—É–∫–∞—î —Ç–∞ –ø–µ—Ä–µ—Ä–æ–±–ª—è—î —à–∫—ñ—Ä—è–Ω—ñ —á–æ–±–æ—Ç–∏.
    """
    print("\n‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∂—É –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—é —Å—Ç–æ—Ä—ñ–Ω–∫—É —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é...")

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    inventory_msg = await get_current_buttons_message(bot_chat, wait_after=DELAY)
    if not inventory_msg:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é.")
        return False

    total_pages = 1
    # –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∑ –Ω–æ–º–µ—Ä–æ–º —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "1/13")
    page_button_found = False
    for row in inventory_msg.reply_markup.inline_keyboard:
        for button in row:
            match = re.search(r'(\d+)/(\d+)', button.text)
            if match:
                current_page = int(match.group(1))
                total_pages = int(match.group(2))
                print(f"üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏: '{button.text}'. –ü–æ—Ç–æ—á–Ω–∞: {current_page}, –í—Å—å–æ–≥–æ: {total_pages}")
                
                # –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏, —â–æ–± –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞
                print(f"‚û°Ô∏è –ù–∞—Ç–∏—Å–∫–∞—é –Ω–∞ –∫–Ω–æ–ø–∫—É '{button.text}' –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏.")
                try:
                    await inventory_msg.click(button.text)
                    print(f"‚úÖ –ö–Ω–æ–ø–∫—É '{button.text}' —É—Å–ø—ñ—à–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ.")
                    page_button_found = True
                    break # –í–∏—Ö–æ–¥–∏–º–æ –∑ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ —Ü–∏–∫–ª—É –ø—ñ—Å–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                except Exception as e:
                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ '{button.text}': {e}")
                    traceback.print_exc()
                    return False
        if page_button_found:
            break # –í–∏—Ö–æ–¥–∏–º–æ –∑ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ —Ü–∏–∫–ª—É –ø—ñ—Å–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏

    if not page_button_found:
        print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É –∑ –Ω–æ–º–µ—Ä–æ–º —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '1/13').")
        return False

    if total_pages > 1:
        # –î–æ–¥–∞—î–º–æ 5-—Å–µ–∫—É–Ω–¥–Ω—É –∑–∞—Ç—Ä–∏–º–∫—É –ø–µ—Ä–µ–¥ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è–º –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        print(f"‚è≥ –ß–µ–∫–∞—é 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è–º –Ω–æ–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏.")
        await asyncio.sleep(5) 

        print(f"‚úâÔ∏è –ù–∞–¥—Å–∏–ª–∞—é –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ({total_pages}) –¥–æ —á–∞—Ç—É.")
        await app.send_message(bot_chat, str(total_pages))
        
        # –ü—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏, —á–µ–∫–∞—î–º–æ –Ω–∞ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –ø–µ—Ä–µ—Ö—ñ–¥
        inventory_msg_on_last_page = await wait_for_new_buttons_message(bot_chat, inventory_msg.id, timeout=25) 
        if not inventory_msg_on_last_page:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—ñ—Å–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—é —Å—Ç–æ—Ä—ñ–Ω–∫—É.")
            return False
    else:
        print("‚ÑπÔ∏è –Ü–Ω–≤–µ–Ω—Ç–∞—Ä –º–∞—î –ª–∏—à–µ –æ–¥–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É.")
        inventory_msg_on_last_page = inventory_msg # –Ø–∫—â–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –æ–¥–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    # –î–æ–¥–∞—î–º–æ 10-—Å–µ–∫—É–Ω–¥–Ω—É –∑–∞—Ç—Ä–∏–º–∫—É –ø–µ—Ä–µ–¥ –ø–æ—à—É–∫–æ–º —á–æ–±—ñ—Ç
    print(f"‚è≥ –ß–µ–∫–∞—é 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ —à—É–∫–∞—Ç–∏ —á–æ–±–æ—Ç–∏ –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ.")
    await asyncio.sleep(10)

    print("üîé –®—É–∫–∞—é —á–æ–±–æ—Ç–∏ –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ.")
    # –¢–µ–ø–µ—Ä, –∫–æ–ª–∏ –º–∏ –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ, —à—É–∫–∞—î–º–æ —á–æ–±–æ—Ç–∏
    found_boots_to_recycle = False
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—è –ø–æ –∫–Ω–æ–ø–∫–∞—Ö –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ (inventory_msg_on_last_page)
    for row in inventory_msg_on_last_page.reply_markup.inline_keyboard:
        for button in row:
            button_text_stripped = button.text.lower().strip()
            if "üë¢ —à–∫—ñ—Ä—è–Ω—ñ —á–æ–±–æ—Ç–∏" in button_text_stripped:
                print(f"‚û°Ô∏è –ù–∞—Ç–∏—Å–∫–∞—é: '{button.text}'")
                try: # Try block starts here
                    await inventory_msg_on_last_page.click(button.text)
                    print(f"‚úÖ –ö–Ω–æ–ø–∫—É '{button.text}' —É—Å–ø—ñ—à–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ.")
                    
                    # –î–æ–¥–∞–Ω–æ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É, —â–æ–± –¥–∞—Ç–∏ Telegram —á–∞—Å –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    await asyncio.sleep(DELAY) 

                    # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ —Ç–∏–º —Å–∞–º–∏–º ID
                    item_details_msg = await app.get_messages(bot_chat, inventory_msg_on_last_page.id)
                    print(f"‚ÑπÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID: {item_details_msg.id}") # –î–æ–¥–∞–Ω–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è

                    if not item_details_msg or not item_details_msg.reply_markup:
                        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ —á–æ–±–æ—Ç–∏.")
                        return False

                    # –¢–µ–ø–µ—Ä —à—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–†–æ–∑—ñ–±—Ä–∞—Ç–∏ –Ω–∞ –±—Ä—É—Ö—Ç" —É —Ü—å–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
                    if await click_button(bot_chat, "üî® –†–æ–∑—ñ–±—Ä–∞—Ç–∏ –Ω–∞ –±—Ä—É—Ö—Ç", message_to_click_on=item_details_msg, wait_after=DELAY):
                        await asyncio.sleep(DELAY)

                        # –ß–µ–∫–∞—î–º–æ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏ "–¢–∞–∫" / "–ù—ñ"
                        confirm_buttons_msg = None
                        for _ in range(5): # Try a few times to get the confirmation message
                            temp_msg = await get_current_buttons_message(bot_chat, wait_after=1)
                            if temp_msg and temp_msg.text and "–≤–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ —â–æ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏" in temp_msg.text.lower():
                                confirm_buttons_msg = temp_msg
                                print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º (ID: {confirm_buttons_msg.id}, –¢–µ–∫—Å—Ç: '{confirm_buttons_msg.text}')")
                                break
                            print(f"‚è≥ –û—á—ñ–∫—É—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º '–¢–∞–∫'/'–ù—ñ'...")
                            await asyncio.sleep(1)

                        if not confirm_buttons_msg:
                            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è '–¢–∞–∫'/'–ù—ñ'.")
                            return False

                        # --- NEW LOGIC FOR CLICKING '–¢–ê–ö' AND VERIFYING DISMANTLE ---
                        print("‚û°Ô∏è –°–ø—Ä–æ–±—É—é –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É '–¢–∞–∫' –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑–±–∏—Ä–∞–Ω–Ω—è —Ç–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.")
                        
                        # –í–∏–∫–æ–Ω—É—î–º–æ –æ–¥–Ω—É —Å–ø—Ä–æ–±—É –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ "–¢–∞–∫"
                        # –ú–∏ –Ω–µ —á–µ–∫–∞—î–º–æ –Ω–∞ —ó—ó —É—Å–ø—ñ—Ö —Ç—É—Ç, –∞ –æ–¥—Ä–∞–∑—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–æ–∑–±–∏—Ä–∞–Ω–Ω—è
                        # –ó–º—ñ–Ω–µ–Ω–æ: –í–∏–∫–ª–∏–∫–∞—î–º–æ click() –Ω–∞–ø—Ä—è–º—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è click_button
                        tak_button_clicked_attempted = False
                        if confirm_buttons_msg and confirm_buttons_msg.reply_markup:
                            for row in confirm_buttons_msg.reply_markup.inline_keyboard:
                                for button in row:
                                    if "—Ç–∞–∫" in button.text.lower().strip():
                                        try:
                                            await confirm_buttons_msg.click(button.text)
                                            print(f"‚úÖ –ö–Ω–æ–ø–∫—É '–¢–∞–∫' –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ (—Å–ø—Ä–æ–±–∞ 1).")
                                            tak_button_clicked_attempted = True
                                            break
                                        except (FloodWait, TimeoutError, RPCError) as e:
                                            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ '–¢–∞–∫' (—Å–ø—Ä–æ–±–∞ 1): {e}. –ü—Ä–æ–¥–æ–≤–∂—É—é –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–æ–∑–±–∏—Ä–∞–Ω–Ω—è.")
                                            # –ü—Ä–∏–≥–Ω—ñ—á—É—î–º–æ —Ç—Ä–∞—Å—É–≤–∞–Ω–Ω—è —Ç—É—Ç, –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ –æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞
                                            pass 
                                            tak_button_clicked_attempted = True # –í–≤–∞–∂–∞—î–º–æ, —â–æ —Å–ø—Ä–æ–±–∞ –±—É–ª–∞
                                            break
                                        except Exception as e:
                                            print(f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ '–¢–∞–∫' (—Å–ø—Ä–æ–±–∞ 1): {e}")
                                            traceback.print_exc() # –í–∏–≤–æ–¥–∏–º–æ —Ç—Ä–∞—Å—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
                                            break
                                if tak_button_clicked_attempted:
                                    break

                        # –û–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è —Å–ø—Ä–æ–±–∏ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ "–¢–∞–∫", –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ —Ä–æ–∑–±–∏—Ä–∞–Ω–Ω—è
                        dismantle_success_msg = await wait_for_specific_text_message(bot_chat, "—Ä–æ–∑—ñ–±—Ä–∞–Ω–æ –Ω–∞ 1 –±—Ä—É—Ö—Ç—É", confirm_buttons_msg.id, timeout=10) 

                        if dismantle_success_msg:
                            print(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑—ñ–±—Ä–∞–Ω–æ: '{dismantle_success_msg.text}'")
                            # –Ø–∫—â–æ —Ä–æ–∑–±–∏—Ä–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ, –æ–¥—Ä–∞–∑—É –Ω–∞–¥—Å–∏–ª–∞—î–º–æ /menu —ñ –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
                            print("‚û°Ô∏è –ù–∞–¥—Å–∏–ª–∞—é –∫–æ–º–∞–Ω–¥—É '/menu' –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —Ü–∏–∫–ª—É.")
                            await app.send_message(bot_chat, "/menu")
                            await asyncio.sleep(DELAY) 
                            return True # –£—Å–ø—ñ—à–Ω–æ —Ä–æ–∑—ñ–±—Ä–∞–Ω–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ /menu
                        else:
                            print("‚ùå –ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ —Ä–æ–∑–±–∏—Ä–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Å–ø—Ä–æ–±–∏ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ '–¢–∞–∫'.")
                            # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ —Ä–æ–∑–±–∏—Ä–∞–Ω–Ω—è –Ω–µ –∑'—è–≤–∏–ª–æ—Å—è,
                            # –º–∏ –≤—Å–µ –æ–¥–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ /menu, —â–æ–± —Å–∫–∏–Ω—É—Ç–∏ —Å—Ç–∞–Ω —ñ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ü–∏–∫–ª.
                            print("‚û°Ô∏è –ù–∞–¥—Å–∏–ª–∞—é –∫–æ–º–∞–Ω–¥—É '/menu' –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É.")
                            await app.send_message(bot_chat, "/menu")
                            await asyncio.sleep(DELAY)
                            return False # –†–æ–∑–±–∏—Ä–∞–Ω–Ω—è, –π–º–æ–≤—ñ—Ä–Ω–æ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑'—è–≤–∏–ª–æ—Å—è

                    else: # –¶–µ–π else –≤—ñ–¥–Ω–æ—Å–∏—Ç—å—Å—è –¥–æ if await click_button(bot_chat, "üî® –†–æ–∑—ñ–±—Ä–∞—Ç–∏ –Ω–∞ –±—Ä—É—Ö—Ç", ...)
                        print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ 'üî® –†–æ–∑—ñ–±—Ä–∞—Ç–∏ –Ω–∞ –±—Ä—É—Ö—Ç' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
                        return False
                except Exception as e: # –¶–µ–π –±–ª–æ–∫ except –≤—ñ–¥–Ω–æ—Å–∏—Ç—å—Å—è –¥–æ try, —â–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –Ω–∞ —Ä—è–¥–∫—É 258
                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ —á–æ–±–æ—Ç–∏ '{button.text}': {e}")
                    traceback.print_exc()
                    return False
    
    if not found_boots_to_recycle:
        print("üë¢ –ß–æ–±–æ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ.")
    return found_boots_to_recycle


async def recycle_boots():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—Ä–æ–±–∫–∏ —á–æ–±—ñ—Ç:
    - –ü–æ—á–∏–Ω–∞—î —Ü–∏–∫–ª –ø–æ—à—É–∫—É —Ç–∞ –ø–µ—Ä–µ—Ä–æ–±–∫–∏ —á–æ–±—ñ—Ç.
    """
    print("\n‚ôªÔ∏è –ü–æ—á–∏–Ω–∞—é –ø–µ—Ä–µ—Ä–æ–±–∫—É —á–æ–±—ñ—Ç")

    # –¶–∏–∫–ª –ø–µ—Ä–µ—Ä–æ–±–∫–∏ —á–æ–±—ñ—Ç
    for i in range(25): # –ü–æ–≤—Ç–æ—Ä—é—î–º–æ 25 —Ä–∞–∑—ñ–≤
        print(f"\n‚ôªÔ∏è –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ—Ä–æ–±–∫–∏ {i+1}/25")

        # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –¥–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é —Ç–∞ —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–∫—É –∫–æ–∂–Ω–æ—ó —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
        print("‚û°Ô∏è –ù–∞–¥—Å–∏–ª–∞—é –∫–æ–º–∞–Ω–¥—É '/menu' –¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.")
        await app.send_message(bot_chat, "/menu")
        await asyncio.sleep(DELAY)
        
        print("‚û°Ô∏è –ù–∞–¥—Å–∏–ª–∞—é –∫–æ–º–∞–Ω–¥—É '–ù–∞–∑–∞–¥' (ReplyKeyboardMarkup) –¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.")
        await app.send_message(bot_chat, "–ù–∞–∑–∞–¥")
        await asyncio.sleep(DELAY)

        print("‚û°Ô∏è –ù–∞–¥—Å–∏–ª–∞—é –∫–æ–º–∞–Ω–¥—É 'üéí –Ü–Ω–≤–µ–Ω—Ç–∞—Ä' (ReplyKeyboardMarkup).")
        await app.send_message(bot_chat, "üéí –Ü–Ω–≤–µ–Ω—Ç–∞—Ä")
        await asyncio.sleep(DELAY) 

        inventory_entry_msg = await get_current_buttons_message(bot_chat, wait_after=DELAY * 2) 
        if not inventory_entry_msg:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é –ø—ñ—Å–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –≤—Ö–æ–¥—É.")
            return # –ó—É–ø–∏–Ω—è—î–º–æ, —è–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏

        # –ó–º—ñ–Ω–µ–Ω–æ: –°–∫–æ—Ä–æ—á–µ–Ω–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è" –≤–¥–≤—ñ—á—ñ
        if not await click_button(bot_chat, "üéΩ –°–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è", message_to_click_on=inventory_entry_msg, wait_after=DELAY): # –ó–º—ñ–Ω–µ–Ω–æ DELAY * 2 –Ω–∞ DELAY
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –°–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤—É –∫–Ω–æ–ø–∫–∏ –∞–±–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è.")
            return # –ó—É–ø–∏–Ω—è—î–º–æ, —è–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –≤ —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è

        found = await find_and_recycle_boots()
        if not found:
            print(f"‚úÖ –ß–æ–±–æ—Ç–∏ –±—ñ–ª—å—à–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è {i+1} —Å–ø—Ä–æ–±.")
            break
        # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —ñ—Ç–µ—Ä–∞—Ü—ñ—è–º–∏ (–ø–æ–≤–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É find_and_recycle_boots)
        await asyncio.sleep(DELAY) 

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞.
    –î–æ–¥–∞–Ω–æ –∑–∞–≥–∞–ª—å–Ω—É –æ–±—Ä–æ–±–∫—É –≤–∏–Ω—è—Ç–∫—ñ–≤ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –≤–∏–ª—å–æ—Ç–∞–º.
    """
    print("üöÄ –°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞...")
    try:
        async with app:
            print("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Telegram.")
            await recycle_boots() # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ—Ä–æ–±–∫–∏
    except FloodWait as e:
        print(f"‚ö†Ô∏è –ì–ª–æ–±–∞–ª—å–Ω–∞ FloodWait: –ó–∞—á–µ–∫–∞–π—Ç–µ {e.value} —Å–µ–∫—É–Ω–¥. –ë–æ—Ç –±—É–≤ –∑–∞–Ω–∞–¥—Ç–æ –∞–∫—Ç–∏–≤–Ω–∏–º.")
        await asyncio.sleep(e.value + 5)
    except RPCError as e:
        print(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞ RPC –ü–æ–º–∏–ª–∫–∞: {e}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–±–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ API. –î–µ—Ç–∞–ª—ñ: {e}")
        traceback.print_exc()
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó: {e}")
        traceback.print_exc() # –í–∏–≤–æ–¥–∏–º–æ –ø–æ–≤–Ω–∏–π —Å—Ç–µ–∫ –≤–∏–∫–ª–∏–∫—ñ–≤ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    finally:
        print("\n--- –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞ ---")
        # –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–Ω—É –∑–∞—Ç—Ä–∏–º–∫—É –ø–µ—Ä–µ–¥ –∑—É–ø–∏–Ω–∫–æ—é Pyrogram
        print("‚è≥ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏, —á–µ–∫–∞—é 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º Pyrogram...")
        await asyncio.sleep(60) # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –∑—É–ø–∏–Ω–∫–æ—é
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ is_running –¥–ª—è –±—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –∫–ª—ñ—î–Ω—Ç–∞
        if app.is_running: 
            print("–ë–æ—Ç –≤—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è –≤—ñ–¥ Telegram...")
            await app.stop()
            print("–ë–æ—Ç –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ Telegram.")
        else:
            print("–ë–æ—Ç –Ω–µ –±—É–≤ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –∞–±–æ –≤–∂–µ –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è.")


# –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
if __name__ == "__main__":
    try:
        app.run(main()) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ app.run() –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ü–∏–∫–ª–æ–º –ø–æ–¥—ñ–π
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏—à–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Pyrogram –∞–±–æ –ø—ñ–¥ —á–∞—Å –π–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")
        traceback.print_exc()